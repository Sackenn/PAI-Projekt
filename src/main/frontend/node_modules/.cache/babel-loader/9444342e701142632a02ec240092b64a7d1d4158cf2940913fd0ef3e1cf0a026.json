{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api';\n\n// Helper function to get userId from localStorage\nconst getUserId = () => {\n  const userId = localStorage.getItem('userId');\n  return userId ? parseInt(userId, 10) : null;\n};\n\n// Board API calls\nexport const fetchBoards = async () => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.get(`${API_URL}/boards/user/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching boards:', error);\n    throw error;\n  }\n};\nexport const fetchBoardDetails = async boardId => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.get(`${API_URL}/boards/${boardId}/user/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching board details:', error);\n    throw error;\n  }\n};\nexport const createBoard = async boardData => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.post(`${API_URL}/boards/user/${userId}`, boardData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating board:', error);\n    throw error;\n  }\n};\nexport const deleteBoard = async boardId => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.delete(`${API_URL}/boards/${boardId}/user/${userId}`);\n    return true;\n  } catch (error) {\n    console.error('Error deleting board:', error);\n    throw error;\n  }\n};\n\n// Board Members API calls\nexport const addMemberToBoard = async (boardId, memberId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.post(`${API_URL}/boards/${boardId}/owner/${userId}/members/${memberId}`);\n    return true;\n  } catch (error) {\n    console.error('Error adding member to board:', error);\n    throw error;\n  }\n};\nexport const removeMemberFromBoard = async (boardId, memberId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.delete(`${API_URL}/boards/${boardId}/owner/${userId}/members/${memberId}`);\n    return true;\n  } catch (error) {\n    console.error('Error removing member from board:', error);\n    throw error;\n  }\n};\nexport const makeOwner = async (boardId, newOwnerId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.put(`${API_URL}/boards/${boardId}/owner/${userId}/change-owner/${newOwnerId}`);\n    return true;\n  } catch (error) {\n    console.error('Error changing board owner:', error);\n    throw error;\n  }\n};\n\n// List API calls\nexport const fetchBoardLists = async boardId => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.get(`${API_URL}/boards/${boardId}/lists?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching board lists:', error);\n    throw error;\n  }\n};\nexport const createList = async (boardId, listData) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.post(`${API_URL}/boards/${boardId}/lists?userId=${userId}`, listData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating list:', error);\n    throw error;\n  }\n};\nexport const updateList = async (boardId, listId, listData) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.put(`${API_URL}/boards/${boardId}/lists/${listId}?userId=${userId}`, listData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating list:', error);\n    throw error;\n  }\n};\nexport const deleteList = async (boardId, listId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.delete(`${API_URL}/boards/${boardId}/lists/${listId}?userId=${userId}`);\n    return true;\n  } catch (error) {\n    console.error('Error deleting list:', error);\n    throw error;\n  }\n};\n\n// Card API calls\nexport const fetchCards = async (boardId, listId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.get(`${API_URL}/boards/${boardId}/lists/${listId}/cards?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching cards:', error);\n    throw error;\n  }\n};\nexport const fetchCardDetails = async (boardId, listId, cardId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.get(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching card details:', error);\n    throw error;\n  }\n};\nexport const createCard = async (boardId, listId, cardData) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.post(`${API_URL}/boards/${boardId}/lists/${listId}/cards?userId=${userId}`, cardData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating card:', error);\n    throw error;\n  }\n};\nexport const updateCard = async (boardId, listId, cardId, cardData) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.put(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}?userId=${userId}`, cardData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating card:', error);\n    throw error;\n  }\n};\nexport const deleteCard = async (boardId, listId, cardId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.delete(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}?userId=${userId}`);\n    return true;\n  } catch (error) {\n    console.error('Error deleting card:', error);\n    throw error;\n  }\n};\n\n// User API calls\nexport const fetchAllUsers = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/user/all`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    throw error;\n  }\n};\n\n// Label API calls\nexport const fetchGlobalLabels = async () => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.get(`${API_URL}/labels/global?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching global labels:', error);\n    throw error;\n  }\n};\nexport const createGlobalLabel = async labelData => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.post(`${API_URL}/labels/global?userId=${userId}`, labelData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating global label:', error);\n    throw error;\n  }\n};\nexport const deleteGlobalLabel = async labelId => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.delete(`${API_URL}/labels/global/${labelId}?userId=${userId}`);\n    return true;\n  } catch (error) {\n    console.error('Error deleting global label:', error);\n    throw error;\n  }\n};\nexport const addLabelToCard = async (boardId, listId, cardId, labelData) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.post(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/labels?userId=${userId}`, labelData);\n    return true;\n  } catch (error) {\n    console.error('Error adding label to card:', error);\n    throw error;\n  }\n};\nexport const addGlobalLabelToCard = async (boardId, listId, cardId, labelId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.post(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/global-labels/${labelId}?userId=${userId}`);\n    return true;\n  } catch (error) {\n    console.error('Error adding global label to card:', error);\n    throw error;\n  }\n};\nexport const removeLabelFromCard = async (boardId, listId, cardId, labelId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.delete(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/labels/${labelId}?userId=${userId}`);\n    return true;\n  } catch (error) {\n    console.error('Error removing label from card:', error);\n    throw error;\n  }\n};\n\n// Task API calls\nexport const fetchCardTasks = async (boardId, listId, cardId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.get(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/tasks?userId=${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching card tasks:', error);\n    throw error;\n  }\n};\nexport const createTask = async (boardId, listId, cardId, taskData) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.post(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/tasks?userId=${userId}`, taskData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating task:', error);\n    throw error;\n  }\n};\nexport const updateTask = async (boardId, listId, cardId, taskId, taskData) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    const response = await axios.put(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/tasks/${taskId}?userId=${userId}`, taskData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating task:', error);\n    throw error;\n  }\n};\nexport const deleteTask = async (boardId, listId, cardId, taskId) => {\n  try {\n    const userId = getUserId();\n    if (!userId) throw new Error('User not logged in');\n    await axios.delete(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/tasks/${taskId}?userId=${userId}`);\n    return true;\n  } catch (error) {\n    console.error('Error deleting task:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getUserId","userId","localStorage","getItem","parseInt","fetchBoards","Error","response","get","data","error","console","fetchBoardDetails","boardId","createBoard","boardData","post","deleteBoard","delete","addMemberToBoard","memberId","removeMemberFromBoard","makeOwner","newOwnerId","put","fetchBoardLists","createList","listData","updateList","listId","deleteList","fetchCards","fetchCardDetails","cardId","createCard","cardData","updateCard","deleteCard","fetchAllUsers","fetchGlobalLabels","createGlobalLabel","labelData","deleteGlobalLabel","labelId","addLabelToCard","addGlobalLabelToCard","removeLabelFromCard","fetchCardTasks","createTask","taskData","updateTask","taskId","deleteTask"],"sources":["C:/Users/janje/Documents/GitHub/PAI-Projekt/src/main/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api';\r\n\r\n// Helper function to get userId from localStorage\r\nconst getUserId = () => {\r\n  const userId = localStorage.getItem('userId');\r\n  return userId ? parseInt(userId, 10) : null;\r\n};\r\n\r\n// Board API calls\r\nexport const fetchBoards = async () => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.get(`${API_URL}/boards/user/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching boards:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchBoardDetails = async (boardId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.get(`${API_URL}/boards/${boardId}/user/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching board details:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createBoard = async (boardData) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.post(`${API_URL}/boards/user/${userId}`, boardData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating board:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteBoard = async (boardId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.delete(`${API_URL}/boards/${boardId}/user/${userId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting board:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Board Members API calls\r\nexport const addMemberToBoard = async (boardId, memberId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.post(`${API_URL}/boards/${boardId}/owner/${userId}/members/${memberId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error adding member to board:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeMemberFromBoard = async (boardId, memberId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.delete(`${API_URL}/boards/${boardId}/owner/${userId}/members/${memberId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error removing member from board:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const makeOwner = async (boardId, newOwnerId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.put(`${API_URL}/boards/${boardId}/owner/${userId}/change-owner/${newOwnerId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error changing board owner:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// List API calls\r\nexport const fetchBoardLists = async (boardId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.get(`${API_URL}/boards/${boardId}/lists?userId=${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching board lists:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createList = async (boardId, listData) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.post(`${API_URL}/boards/${boardId}/lists?userId=${userId}`, listData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating list:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateList = async (boardId, listId, listData) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.put(`${API_URL}/boards/${boardId}/lists/${listId}?userId=${userId}`, listData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating list:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteList = async (boardId, listId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.delete(`${API_URL}/boards/${boardId}/lists/${listId}?userId=${userId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting list:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Card API calls\r\nexport const fetchCards = async (boardId, listId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.get(`${API_URL}/boards/${boardId}/lists/${listId}/cards?userId=${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching cards:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchCardDetails = async (boardId, listId, cardId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.get(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}?userId=${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching card details:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createCard = async (boardId, listId, cardData) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.post(`${API_URL}/boards/${boardId}/lists/${listId}/cards?userId=${userId}`, cardData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating card:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateCard = async (boardId, listId, cardId, cardData) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.put(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}?userId=${userId}`, cardData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating card:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteCard = async (boardId, listId, cardId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.delete(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}?userId=${userId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting card:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// User API calls\r\nexport const fetchAllUsers = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/user/all`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Label API calls\r\nexport const fetchGlobalLabels = async () => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.get(`${API_URL}/labels/global?userId=${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching global labels:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createGlobalLabel = async (labelData) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.post(`${API_URL}/labels/global?userId=${userId}`, labelData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating global label:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteGlobalLabel = async (labelId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.delete(`${API_URL}/labels/global/${labelId}?userId=${userId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting global label:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const addLabelToCard = async (boardId, listId, cardId, labelData) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.post(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/labels?userId=${userId}`, labelData);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error adding label to card:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const addGlobalLabelToCard = async (boardId, listId, cardId, labelId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.post(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/global-labels/${labelId}?userId=${userId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error adding global label to card:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const removeLabelFromCard = async (boardId, listId, cardId, labelId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.delete(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/labels/${labelId}?userId=${userId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error removing label from card:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Task API calls\r\nexport const fetchCardTasks = async (boardId, listId, cardId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.get(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/tasks?userId=${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching card tasks:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createTask = async (boardId, listId, cardId, taskData) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.post(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/tasks?userId=${userId}`, taskData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateTask = async (boardId, listId, cardId, taskId, taskData) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    const response = await axios.put(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/tasks/${taskId}?userId=${userId}`, taskData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteTask = async (boardId, listId, cardId, taskId) => {\r\n  try {\r\n    const userId = getUserId();\r\n    if (!userId) throw new Error('User not logged in');\r\n\r\n    await axios.delete(`${API_URL}/boards/${boardId}/lists/${listId}/cards/${cardId}/tasks/${taskId}?userId=${userId}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting task:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}